#!/usr/bin/env php
<?php
use Bunny\Async\Client;
use Bunny\{Channel,Message};
use React\Promise;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\{InputInterface,InputOption};
use Symfony\Component\Console\Output\OutputInterface;

    require file_exists(__DIR__ . '/../vendor/autoload.php') ? __DIR__ . '/../vendor/autoload.php' : __DIR__ . '../autoload.php';

    $cmd = new class extends Command {
        private $colourLookup = [
            'amq.rabbitmq.log:error' => 'fg=red',
            'amq.rabbitmq.log:warning' => 'fg=yellow',
            'amq.rabbitmq.log:info' => 'fg=green'
        ];

        protected function configure() {
            $this->setName('binky')
                ->setDescription('Spy on RabbitMQ exchanges')
                ->addOption('host', 'rh', InputOption::VALUE_OPTIONAL, 'host to connect to', 'localhost')
                ->addOption('user', 'u', InputOption::VALUE_OPTIONAL, 'username to connect to as', 'guest')
                ->addOption('pass', 'p', InputOption::VALUE_OPTIONAL, 'password to connect to for given user', 'guest')
                ->addOption('vhost', 'vh', InputOption::VALUE_OPTIONAL, 'virtual host to create channel on', '/')
                ->addOption('bind', 'b', InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY, 'an exchange:key to bind to', ['amq.rabbitmq.log:#'])
            ;
        }

        protected function execute(InputInterface $input, OutputInterface $output) {
            $c = new Client;

            $c->connect()->then(function(Client $c) {
                return $c->channel();
            })->then(function (Channel $ch) {
                return Promise\all([
                    $ch,
                    $ch->queueDeclare('', false, false, true, true)
                ]);
            })->then(function($r) use ($input) {
                list($ch, $qr) = $r;

                return Promise\all(array_merge([$ch, $qr], array_map(function($exKey) use ($ch, $qr) {
                    list($exchange, $routingKey) = explode(':', "{$exKey}:#");

                    return $ch->queueBind($qr->queue, $exchange, $routingKey);
                }, $input->getOption('bind'))));
            })->then(function($r) use ($input, $output) {
                return $r[0]->consume(function(Message $msg, Channel $ch, Client $c) use ($output) {
                    $cKey = "{$msg->exchange}:{$msg->routingKey}";
                    if (array_key_exists($cKey, $this->colourLookup)) {
                        $output->writeln(sprintf("<{$this->colourLookup[$cKey]}>%s</>", $msg->content));
                    } else {
                        $output->writeln("{$msg->exchange}:{$msg->routingKey} > {$msg->content}");
                    }
                });
            });

            $c->run();
        }
    };

    (new class($cmd) extends Application {
        private $cmd;

        public function __construct(Command $cmd) {
            $this->cmd = $cmd;

            parent::__construct('Binky', 'v0');
        }

        protected function getCommandName(InputInterface $input) {
            return $this->cmd->getName();
        }

        protected function getDefaultCommands() {
            $defaults = parent::getDefaultCommands();

            $defaults[] = $this->cmd;

            return $defaults;
        }

        public function getDefinition() {
            $inputDefinition = parent::getDefinition();
            $inputDefinition->setArguments();

            return $inputDefinition;
        }
    })->run();
